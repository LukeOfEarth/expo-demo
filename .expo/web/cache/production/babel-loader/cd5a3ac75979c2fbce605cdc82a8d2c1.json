{"ast":null,"code":"import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty2(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import{Background,getDefaultHeaderHeight,SafeAreaProviderCompat}from'@react-navigation/elements';import Color from'color';import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{forModalPresentationIOS,forNoAnimation as forNoAnimationCard}from\"../../TransitionConfigs/CardStyleInterpolators\";import{DefaultTransition,ModalFadeTransition,ModalTransition}from\"../../TransitionConfigs/TransitionPresets\";import getDistanceForDirection from\"../../utils/getDistanceForDirection\";import{MaybeScreen,MaybeScreenContainer}from\"../Screens\";import{getIsModalPresentation}from\"./Card\";import CardContainer from\"./CardContainer\";var EPSILON=0.01;var STATE_INACTIVE=0;var STATE_TRANSITIONING_OR_BELOW_TOP=1;var STATE_ON_TOP=2;var FALLBACK_DESCRIPTOR=Object.freeze({options:{}});var getInterpolationIndex=function getInterpolationIndex(scenes,index){var cardStyleInterpolator=scenes[index].descriptor.options.cardStyleInterpolator;var interpolationIndex=0;for(var i=index-1;i>=0;i--){var _scenes$i;var cardStyleInterpolatorCurrent=(_scenes$i=scenes[i])===null||_scenes$i===void 0?void 0:_scenes$i.descriptor.options.cardStyleInterpolator;if(cardStyleInterpolatorCurrent!==cardStyleInterpolator){break;}interpolationIndex++;}return interpolationIndex;};var getIsModal=function getIsModal(scene,interpolationIndex,isParentModal){if(isParentModal){return true;}var cardStyleInterpolator=scene.descriptor.options.cardStyleInterpolator;var isModalPresentation=getIsModalPresentation(cardStyleInterpolator);var isModal=isModalPresentation&&interpolationIndex!==0;return isModal;};var getHeaderHeights=function getHeaderHeights(scenes,insets,isParentHeaderShown,isParentModal,layout,previous){return scenes.reduce(function(acc,curr,index){var _curr$descriptor$opti=curr.descriptor.options,_curr$descriptor$opti2=_curr$descriptor$opti.headerStatusBarHeight,headerStatusBarHeight=_curr$descriptor$opti2===void 0?isParentHeaderShown?0:insets.top:_curr$descriptor$opti2,headerStyle=_curr$descriptor$opti.headerStyle;var style=StyleSheet.flatten(headerStyle||{});var height=typeof style.height==='number'?style.height:previous[curr.route.key];var interpolationIndex=getInterpolationIndex(scenes,index);var isModal=getIsModal(curr,interpolationIndex,isParentModal);acc[curr.route.key]=typeof height==='number'?height:getDefaultHeaderHeight(layout,isModal,headerStatusBarHeight);return acc;},{});};var getDistanceFromOptions=function getDistanceFromOptions(layout,descriptor){var _ref=(descriptor===null||descriptor===void 0?void 0:descriptor.options)||{},presentation=_ref.presentation,_ref$gestureDirection=_ref.gestureDirection,gestureDirection=_ref$gestureDirection===void 0?presentation==='modal'?ModalTransition.gestureDirection:DefaultTransition.gestureDirection:_ref$gestureDirection;return getDistanceForDirection(layout,gestureDirection);};var getProgressFromGesture=function getProgressFromGesture(gesture,layout,descriptor){var distance=getDistanceFromOptions({width:Math.max(1,layout.width),height:Math.max(1,layout.height)},descriptor);if(distance>0){return gesture.interpolate({inputRange:[0,distance],outputRange:[1,0]});}return gesture.interpolate({inputRange:[distance,0],outputRange:[0,1]});};var CardStack=function(_React$Component){_inherits(CardStack,_React$Component);var _super=_createSuper(CardStack);function CardStack(_props){var _this;_classCallCheck(this,CardStack);_this=_super.call(this,_props);_defineProperty(_assertThisInitialized(_this),\"handleLayout\",function(e){var _e$nativeEvent$layout=e.nativeEvent.layout,height=_e$nativeEvent$layout.height,width=_e$nativeEvent$layout.width;var layout={width:width,height:height};_this.setState(function(state,props){if(height===state.layout.height&&width===state.layout.width){return null;}return{layout:layout,headerHeights:getHeaderHeights(state.scenes,props.insets,props.isParentHeaderShown,props.isParentModal,layout,state.headerHeights)};});});_defineProperty(_assertThisInitialized(_this),\"handleHeaderLayout\",function(_ref2){var route=_ref2.route,height=_ref2.height;_this.setState(function(_ref3){var headerHeights=_ref3.headerHeights;var previousHeight=headerHeights[route.key];if(previousHeight===height){return null;}return{headerHeights:_objectSpread(_objectSpread({},headerHeights),{},_defineProperty2({},route.key,height))};});});_defineProperty(_assertThisInitialized(_this),\"getFocusedRoute\",function(){var state=_this.props.state;return state.routes[state.index];});_defineProperty(_assertThisInitialized(_this),\"getPreviousScene\",function(_ref4){var route=_ref4.route;var getPreviousRoute=_this.props.getPreviousRoute;var scenes=_this.state.scenes;var previousRoute=getPreviousRoute({route:route});if(previousRoute){var previousScene=scenes.find(function(scene){return scene.descriptor.route.key===previousRoute.key;});return previousScene;}return undefined;});_this.state={routes:[],scenes:[],gestures:{},layout:SafeAreaProviderCompat.initialMetrics.frame,descriptors:_this.props.descriptors,headerHeights:{}};return _this;}_createClass(CardStack,[{key:\"render\",value:function render(){var _this2=this;var _this$props=this.props,insets=_this$props.insets,state=_this$props.state,routes=_this$props.routes,closingRouteKeys=_this$props.closingRouteKeys,onOpenRoute=_this$props.onOpenRoute,onCloseRoute=_this$props.onCloseRoute,renderHeader=_this$props.renderHeader,renderScene=_this$props.renderScene,isParentHeaderShown=_this$props.isParentHeaderShown,isParentModal=_this$props.isParentModal,onTransitionStart=_this$props.onTransitionStart,onTransitionEnd=_this$props.onTransitionEnd,onGestureStart=_this$props.onGestureStart,onGestureEnd=_this$props.onGestureEnd,onGestureCancel=_this$props.onGestureCancel,_this$props$detachIna=_this$props.detachInactiveScreens,detachInactiveScreens=_this$props$detachIna===void 0?Platform.OS==='web'||Platform.OS==='android'||Platform.OS==='ios':_this$props$detachIna;var _this$state=this.state,scenes=_this$state.scenes,layout=_this$state.layout,gestures=_this$state.gestures,headerHeights=_this$state.headerHeights;var focusedRoute=state.routes[state.index];var focusedHeaderHeight=headerHeights[focusedRoute.key];var isFloatHeaderAbsolute=this.state.scenes.slice(-2).some(function(scene){var _scene$descriptor$opt;var options=(_scene$descriptor$opt=scene.descriptor.options)!==null&&_scene$descriptor$opt!==void 0?_scene$descriptor$opt:{};var headerMode=options.headerMode,headerTransparent=options.headerTransparent,_options$headerShown=options.headerShown,headerShown=_options$headerShown===void 0?true:_options$headerShown;if(headerTransparent||headerShown===false||headerMode==='screen'){return true;}return false;});var activeScreensLimit=1;for(var i=scenes.length-1;i>=0;i--){var options=scenes[i].descriptor.options;var _options$detachPrevio=options.detachPreviousScreen,detachPreviousScreen=_options$detachPrevio===void 0?options.presentation==='transparentModal'?false:getIsModalPresentation(options.cardStyleInterpolator)?i!==scenes.map(function(scene){return scene.descriptor.options.cardStyleInterpolator;}).lastIndexOf(forModalPresentationIOS):true:_options$detachPrevio;if(detachPreviousScreen===false){activeScreensLimit++;}else{break;}}var floatingHeader=React.createElement(React.Fragment,{key:\"header\"},renderHeader({mode:'float',layout:layout,scenes:scenes,getPreviousScene:this.getPreviousScene,getFocusedRoute:this.getFocusedRoute,onContentHeightChange:this.handleHeaderLayout,style:[styles.floating,isFloatHeaderAbsolute&&[{height:focusedHeaderHeight},styles.absolute]]}));return React.createElement(Background,null,isFloatHeaderAbsolute?null:floatingHeader,React.createElement(MaybeScreenContainer,{enabled:detachInactiveScreens,style:styles.container,onLayout:this.handleLayout},routes.map(function(route,index,self){var _scenes,_scenes2;var focused=focusedRoute.key===route.key;var gesture=gestures[route.key];var scene=scenes[index];var isScreenActive=1;if(index<self.length-activeScreensLimit-1){isScreenActive=STATE_INACTIVE;}else{var sceneForActivity=scenes[self.length-1];var outputValue=index===self.length-1?STATE_ON_TOP:index>=self.length-activeScreensLimit?STATE_TRANSITIONING_OR_BELOW_TOP:STATE_INACTIVE;isScreenActive=sceneForActivity?sceneForActivity.progress.current.interpolate({inputRange:[0,1-EPSILON,1],outputRange:[1,1,outputValue],extrapolate:'clamp'}):STATE_TRANSITIONING_OR_BELOW_TOP;}var _scene$descriptor$opt2=scene.descriptor.options,_scene$descriptor$opt3=_scene$descriptor$opt2.headerShown,headerShown=_scene$descriptor$opt3===void 0?true:_scene$descriptor$opt3,headerTransparent=_scene$descriptor$opt2.headerTransparent,headerStyle=_scene$descriptor$opt2.headerStyle,headerTintColor=_scene$descriptor$opt2.headerTintColor;var safeAreaInsetTop=insets.top;var safeAreaInsetRight=insets.right;var safeAreaInsetBottom=insets.bottom;var safeAreaInsetLeft=insets.left;var headerHeight=headerShown!==false?headerHeights[route.key]:0;var _ref5=StyleSheet.flatten(headerStyle)||{},headerBackgroundColor=_ref5.backgroundColor;var headerDarkContent;if(headerShown){if(typeof headerTintColor==='string'){headerDarkContent=Color(headerTintColor).isDark();}else if(typeof headerBackgroundColor==='string'){headerDarkContent=!Color(headerBackgroundColor).isDark();}}var interpolationIndex=getInterpolationIndex(scenes,index);var isModal=getIsModal(scene,interpolationIndex,isParentModal);var isNextScreenTransparent=((_scenes=scenes[index+1])===null||_scenes===void 0?void 0:_scenes.descriptor.options.presentation)==='transparentModal';var detachCurrentScreen=((_scenes2=scenes[index+1])===null||_scenes2===void 0?void 0:_scenes2.descriptor.options.detachPreviousScreen)!==false;return React.createElement(MaybeScreen,{key:route.key,style:StyleSheet.absoluteFill,enabled:detachInactiveScreens,active:isScreenActive,pointerEvents:\"box-none\"},React.createElement(CardContainer,{index:index,interpolationIndex:interpolationIndex,modal:isModal,active:index===self.length-1,focused:focused,closing:closingRouteKeys.includes(route.key),layout:layout,gesture:gesture,scene:scene,safeAreaInsetTop:safeAreaInsetTop,safeAreaInsetRight:safeAreaInsetRight,safeAreaInsetBottom:safeAreaInsetBottom,safeAreaInsetLeft:safeAreaInsetLeft,onGestureStart:onGestureStart,onGestureCancel:onGestureCancel,onGestureEnd:onGestureEnd,headerHeight:headerHeight,isParentHeaderShown:isParentHeaderShown,onHeaderHeightChange:_this2.handleHeaderLayout,getPreviousScene:_this2.getPreviousScene,getFocusedRoute:_this2.getFocusedRoute,headerDarkContent:headerDarkContent,hasAbsoluteFloatHeader:isFloatHeaderAbsolute&&!headerTransparent,renderHeader:renderHeader,renderScene:renderScene,onOpenRoute:onOpenRoute,onCloseRoute:onCloseRoute,onTransitionStart:onTransitionStart,onTransitionEnd:onTransitionEnd,isNextScreenTransparent:isNextScreenTransparent,detachCurrentScreen:detachCurrentScreen}));})),isFloatHeaderAbsolute?floatingHeader:null);}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(props,state){if(props.routes===state.routes&&props.descriptors===state.descriptors){return null;}var gestures=props.routes.reduce(function(acc,curr){var descriptor=props.descriptors[curr.key];var _ref6=(descriptor===null||descriptor===void 0?void 0:descriptor.options)||{},animationEnabled=_ref6.animationEnabled;acc[curr.key]=state.gestures[curr.key]||new Animated.Value(props.openingRouteKeys.includes(curr.key)&&animationEnabled!==false?getDistanceFromOptions(state.layout,descriptor):0);return acc;},{});var scenes=props.routes.map(function(route,index,self){var _descriptor$options$h;var previousRoute=self[index-1];var nextRoute=self[index+1];var oldScene=state.scenes[index];var currentGesture=gestures[route.key];var previousGesture=previousRoute?gestures[previousRoute.key]:undefined;var nextGesture=nextRoute?gestures[nextRoute.key]:undefined;var descriptor=props.descriptors[route.key]||state.descriptors[route.key]||(oldScene?oldScene.descriptor:FALLBACK_DESCRIPTOR);var nextDescriptor=props.descriptors[nextRoute===null||nextRoute===void 0?void 0:nextRoute.key]||state.descriptors[nextRoute===null||nextRoute===void 0?void 0:nextRoute.key];var previousDescriptor=props.descriptors[previousRoute===null||previousRoute===void 0?void 0:previousRoute.key]||state.descriptors[previousRoute===null||previousRoute===void 0?void 0:previousRoute.key];var optionsForTransitionConfig=index!==self.length-1&&nextDescriptor&&nextDescriptor.options.presentation!=='transparentModal'?nextDescriptor.options:descriptor.options;var defaultTransitionPreset=optionsForTransitionConfig.presentation==='modal'?ModalTransition:optionsForTransitionConfig.presentation==='transparentModal'?ModalFadeTransition:DefaultTransition;var _optionsForTransition=optionsForTransitionConfig.animationEnabled,animationEnabled=_optionsForTransition===void 0?Platform.OS!=='web'&&Platform.OS!=='windows'&&Platform.OS!=='macos':_optionsForTransition,_optionsForTransition2=optionsForTransitionConfig.gestureEnabled,gestureEnabled=_optionsForTransition2===void 0?Platform.OS==='ios'&&animationEnabled:_optionsForTransition2,_optionsForTransition3=optionsForTransitionConfig.gestureDirection,gestureDirection=_optionsForTransition3===void 0?defaultTransitionPreset.gestureDirection:_optionsForTransition3,_optionsForTransition4=optionsForTransitionConfig.transitionSpec,transitionSpec=_optionsForTransition4===void 0?defaultTransitionPreset.transitionSpec:_optionsForTransition4,_optionsForTransition5=optionsForTransitionConfig.cardStyleInterpolator,cardStyleInterpolator=_optionsForTransition5===void 0?animationEnabled===false?forNoAnimationCard:defaultTransitionPreset.cardStyleInterpolator:_optionsForTransition5,_optionsForTransition6=optionsForTransitionConfig.headerStyleInterpolator,headerStyleInterpolator=_optionsForTransition6===void 0?defaultTransitionPreset.headerStyleInterpolator:_optionsForTransition6,_optionsForTransition7=optionsForTransitionConfig.cardOverlayEnabled,cardOverlayEnabled=_optionsForTransition7===void 0?Platform.OS!=='ios'&&optionsForTransitionConfig.presentation!=='transparentModal'||getIsModalPresentation(cardStyleInterpolator):_optionsForTransition7;var headerMode=(_descriptor$options$h=descriptor.options.headerMode)!==null&&_descriptor$options$h!==void 0?_descriptor$options$h:!(optionsForTransitionConfig.presentation==='modal'||optionsForTransitionConfig.presentation==='transparentModal'||(nextDescriptor===null||nextDescriptor===void 0?void 0:nextDescriptor.options.presentation)==='modal'||(nextDescriptor===null||nextDescriptor===void 0?void 0:nextDescriptor.options.presentation)==='transparentModal'||getIsModalPresentation(cardStyleInterpolator))&&Platform.OS==='ios'&&descriptor.options.header===undefined?'float':'screen';var scene={route:route,descriptor:_objectSpread(_objectSpread({},descriptor),{},{options:_objectSpread(_objectSpread({},descriptor.options),{},{animationEnabled:animationEnabled,cardOverlayEnabled:cardOverlayEnabled,cardStyleInterpolator:cardStyleInterpolator,gestureDirection:gestureDirection,gestureEnabled:gestureEnabled,headerStyleInterpolator:headerStyleInterpolator,transitionSpec:transitionSpec,headerMode:headerMode})}),progress:{current:getProgressFromGesture(currentGesture,state.layout,descriptor),next:nextGesture&&(nextDescriptor===null||nextDescriptor===void 0?void 0:nextDescriptor.options.presentation)!=='transparentModal'?getProgressFromGesture(nextGesture,state.layout,nextDescriptor):undefined,previous:previousGesture?getProgressFromGesture(previousGesture,state.layout,previousDescriptor):undefined},__memo:[state.layout,descriptor,nextDescriptor,previousDescriptor,currentGesture,nextGesture,previousGesture]};if(oldScene&&scene.__memo.every(function(it,i){return oldScene.__memo[i]===it;})){return oldScene;}return scene;});return{routes:props.routes,scenes:scenes,gestures:gestures,descriptors:props.descriptors,headerHeights:getHeaderHeights(scenes,props.insets,props.isParentHeaderShown,props.isParentModal,state.layout,state.headerHeights)};}}]);return CardStack;}(React.Component);export{CardStack as default};var styles=StyleSheet.create({container:{flex:1},absolute:{position:'absolute',top:0,left:0,right:0},floating:{zIndex:1}});","map":{"version":3,"sources":["CardStack.tsx"],"names":["forNoAnimation","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","options","getInterpolationIndex","cardStyleInterpolator","scenes","interpolationIndex","i","index","cardStyleInterpolatorCurrent","getIsModal","scene","isModalPresentation","getIsModalPresentation","isModal","getHeaderHeights","headerStatusBarHeight","isParentHeaderShown","insets","headerStyle","curr","style","StyleSheet","height","previous","acc","getDefaultHeaderHeight","getDistanceFromOptions","gestureDirection","presentation","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","distance","width","Math","layout","inputRange","outputRange","React","getDerivedStateFromProps","props","state","gestures","descriptor","animationEnabled","Animated","previousRoute","self","nextRoute","oldScene","currentGesture","route","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","defaultTransitionPreset","Platform","gestureEnabled","transitionSpec","headerStyleInterpolator","cardOverlayEnabled","headerMode","progress","current","next","undefined","__memo","routes","descriptors","headerHeights","constructor","SafeAreaProviderCompat","e","previousHeight","getPreviousRoute","previousScene","render","detachInactiveScreens","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","headerShown","headerTransparent","activeScreensLimit","detachPreviousScreen","floatingHeader","renderHeader","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","styles","handleLayout","focused","gesture","isScreenActive","sceneForActivity","outputValue","extrapolate","headerTintColor","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","backgroundColor","headerBackgroundColor","headerDarkContent","Color","isNextScreenTransparent","detachCurrentScreen","closingRouteKeys","container","flex","absolute","position","top","left","right","floating","zIndex"],"mappings":"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","sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  DefaultTransition,\n  ModalFadeTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n\n      const oldScene = state.scenes[index];\n\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute\n        ? gestures[previousRoute.key]\n        : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n      const descriptor =\n        props.descriptors[route.key] ||\n        state.descriptors[route.key] ||\n        (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n      const nextDescriptor =\n        props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key];\n\n      const previousDescriptor =\n        props.descriptors[previousRoute?.key] ||\n        state.descriptors[previousRoute?.key];\n\n      // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n      const optionsForTransitionConfig =\n        index !== self.length - 1 &&\n        nextDescriptor &&\n        nextDescriptor.options.presentation !== 'transparentModal'\n          ? nextDescriptor.options\n          : descriptor.options;\n\n      let defaultTransitionPreset =\n        optionsForTransitionConfig.presentation === 'modal'\n          ? ModalTransition\n          : optionsForTransitionConfig.presentation === 'transparentModal'\n          ? ModalFadeTransition\n          : DefaultTransition;\n\n      const {\n        animationEnabled = Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false\n          ? forNoAnimationCard\n          : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = (Platform.OS !== 'ios' &&\n          optionsForTransitionConfig.presentation !== 'transparentModal') ||\n          getIsModalPresentation(cardStyleInterpolator),\n      } = optionsForTransitionConfig;\n\n      const headerMode: StackHeaderMode =\n        descriptor.options.headerMode ??\n        (!(\n          optionsForTransitionConfig.presentation === 'modal' ||\n          optionsForTransitionConfig.presentation === 'transparentModal' ||\n          nextDescriptor?.options.presentation === 'modal' ||\n          nextDescriptor?.options.presentation === 'transparentModal' ||\n          getIsModalPresentation(cardStyleInterpolator)\n        ) &&\n        Platform.OS === 'ios' &&\n        descriptor.options.header === undefined\n          ? 'float'\n          : 'screen');\n\n      const scene = {\n        route,\n        descriptor: {\n          ...descriptor,\n          options: {\n            ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode,\n          },\n        },\n        progress: {\n          current: getProgressFromGesture(\n            currentGesture,\n            state.layout,\n            descriptor\n          ),\n          next:\n            nextGesture &&\n            nextDescriptor?.options.presentation !== 'transparentModal'\n              ? getProgressFromGesture(\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n          previous: previousGesture\n            ? getProgressFromGesture(\n                previousGesture,\n                state.layout,\n                previousDescriptor\n              )\n            : undefined,\n        },\n        __memo: [\n          state.layout,\n          descriptor,\n          nextDescriptor,\n          previousDescriptor,\n          currentGesture,\n          nextGesture,\n          previousGesture,\n        ],\n      };\n\n      if (\n        oldScene &&\n        scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })\n      ) {\n        return oldScene;\n      }\n\n      return scene;\n    });\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n          ? i !==\n            scenes\n              .map((scene) => scene.descriptor.options.cardStyleInterpolator)\n              .lastIndexOf(forModalPresentationIOS)\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            const { backgroundColor: headerBackgroundColor } =\n              StyleSheet.flatten(headerStyle) || {};\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (typeof headerTintColor === 'string') {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else if (typeof headerBackgroundColor === 'string') {\n                headerDarkContent = !Color(headerBackgroundColor).isDark();\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}