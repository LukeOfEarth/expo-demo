{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useTheme}from'@react-navigation/native';import*as React from'react';import StatusBar from\"react-native-web/dist/exports/StatusBar\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";export default function ModalStatusBarManager(_ref){var dark=_ref.dark,layout=_ref.layout,insets=_ref.insets,style=_ref.style;var _flattenedStyle$trans,_flattenedStyle$trans2;var _useTheme=useTheme(),darkTheme=_useTheme.dark;var _React$useState=React.useState(true),_React$useState2=_slicedToArray(_React$useState,2),overlapping=_React$useState2[0],setOverlapping=_React$useState2[1];var scale=1-20/layout.width;var offset=(insets.top-34)*scale;var flattenedStyle=StyleSheet.flatten(style);var translateY=flattenedStyle===null||flattenedStyle===void 0?void 0:(_flattenedStyle$trans=flattenedStyle.transform)===null||_flattenedStyle$trans===void 0?void 0:(_flattenedStyle$trans2=_flattenedStyle$trans.find(function(s){return s.translateY!==undefined;}))===null||_flattenedStyle$trans2===void 0?void 0:_flattenedStyle$trans2.translateY;React.useEffect(function(){var listener=function listener(_ref2){var value=_ref2.value;setOverlapping(value<offset);};var sub=translateY===null||translateY===void 0?void 0:translateY.addListener(listener);return function(){return translateY===null||translateY===void 0?void 0:translateY.removeListener(sub);};},[offset,translateY]);var darkContent=dark!==null&&dark!==void 0?dark:!darkTheme;return React.createElement(StatusBar,{animated:true,barStyle:overlapping&&darkContent?'dark-content':'light-content'});}","map":{"version":3,"sources":["ModalStatusBarManager.tsx"],"names":["style","dark","darkTheme","useTheme","React","scale","layout","offset","insets","flattenedStyle","StyleSheet","translateY","s","listener","value","setOverlapping","sub","darkContent","overlapping"],"mappings":"iEAAA,OAAA,QAAA,KAAA,0BAAA,CACA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,gIAaA,cAAe,SAAA,CAAA,qBAAA,MAKL,IALoC,CAAA,IAKpC,MALoC,IAKpC,CALoC,MAKpC,MALoC,MAKpC,CALoC,MAKpC,MALoC,MAKpC,CADRA,KACQ,MADRA,KACQ,CAAA,GAAA,CAAA,qBAAA,CAAA,sBAAA,CACR,cAA4BG,QAA5B,EAAA,CAAcD,SAAd,WAAQD,IAAR,CACA,oBAAsCG,KAAK,CAALA,QAAAA,CAAtC,IAAsCA,CAAtC,oDAAM,WAAN,qBAAM,cAAN,qBAEA,GAAMC,CAAAA,KAAK,CAAG,EAAI,GAAKC,MAAM,CAA7B,KAAA,CACA,GAAMC,CAAAA,MAAM,CAAG,CAACC,MAAM,CAANA,GAAAA,CAAD,EAAA,EAAf,KAAA,CAEA,GAAMC,CAAAA,cAAc,CAAGC,UAAU,CAAVA,OAAAA,CAAvB,KAAuBA,CAAvB,CACA,GAAMC,CAAAA,UAAU,CAAGF,cAAH,GAAA,IAAGA,EAAAA,cAAH,GAAA,IAAA,EAAGA,CAAH,IAAA,EAAGA,CAAH,CAAA,qBAAA,CAAGA,cAAc,CAAjB,SAAA,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,CAAA,sBAAA,CAAGA,qBAAAA,CAAAA,IAAAA,CAChBG,SAAAA,CAAD,QAAYA,CAAAA,CAAC,CAADA,UAAAA,GADE,SACd,EADiBH,CAAH,IAAA,IAAA,EAAA,sBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAGA,sBAAAA,CAAnB,UAAA,CAIAL,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAMS,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,OAAkC,IAA/BC,CAAAA,KAA+B,OAA/BA,KAA+B,CACjDC,cAAc,CAACD,KAAK,CAApBC,MAAc,CAAdA,CADF,CAAA,CAIA,GAAMC,CAAAA,GAAG,CAAGL,UAAH,GAAA,IAAGA,EAAAA,UAAH,GAAA,IAAA,EAAGA,CAAH,IAAA,EAAGA,CAAAA,UAAU,CAAVA,WAAAA,CAAZ,QAAYA,CAAZ,CAEA,MAAO,kBAAMA,CAAAA,UAAN,GAAA,IAAMA,EAAAA,UAAN,GAAA,IAAA,EAAMA,CAAN,IAAA,EAAMA,CAAAA,UAAU,CAAVA,cAAAA,CAAb,GAAaA,CAAN,EAAP,CAPFP,CAAAA,CAQG,CAAA,MAAA,CARHA,UAQG,CARHA,EAUA,GAAMa,CAAAA,WAAW,CAAGhB,IAAH,GAAA,IAAGA,EAAAA,IAAH,GAAA,IAAA,EAAGA,CAAH,IAAGA,CAAQ,CAA5B,SAAA,CAEA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,SAAA,CAAA,CACE,QAAQ,CADV,IAAA,CAEE,QAAQ,CAAEiB,WAAW,EAAXA,WAAAA,CAAAA,cAAAA,CAA8C,eAF1D,CAAA,CADF,CAMD","sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StatusBar, StyleSheet } from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport type { Layout } from '../types';\n\ntype Props = {\n  dark: boolean | undefined;\n  layout: Layout;\n  insets: EdgeInsets;\n  style: any;\n};\n\nexport default function ModalStatusBarManager({\n  dark,\n  layout,\n  insets,\n  style,\n}: Props) {\n  const { dark: darkTheme } = useTheme();\n  const [overlapping, setOverlapping] = React.useState(true);\n\n  const scale = 1 - 20 / layout.width;\n  const offset = (insets.top - 34) * scale;\n\n  const flattenedStyle = StyleSheet.flatten(style);\n  const translateY = flattenedStyle?.transform?.find(\n    (s: any) => s.translateY !== undefined\n  )?.translateY;\n\n  React.useEffect(() => {\n    const listener = ({ value }: { value: number }) => {\n      setOverlapping(value < offset);\n    };\n\n    const sub = translateY?.addListener(listener);\n\n    return () => translateY?.removeListener(sub);\n  }, [offset, translateY]);\n\n  const darkContent = dark ?? !darkTheme;\n\n  return (\n    <StatusBar\n      animated\n      barStyle={overlapping && darkContent ? 'dark-content' : 'light-content'}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}