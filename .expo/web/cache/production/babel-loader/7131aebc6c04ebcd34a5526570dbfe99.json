{"ast":null,"code":"import*as React from'react';import Keyboard from\"react-native-web/dist/exports/Keyboard\";import TextInput from\"react-native-web/dist/exports/TextInput\";export default function useKeyboardManager(isEnabled){var previouslyFocusedTextInputRef=React.useRef(undefined);var startTimestampRef=React.useRef(0);var keyboardTimeoutRef=React.useRef();var clearKeyboardTimeout=React.useCallback(function(){if(keyboardTimeoutRef.current!==undefined){clearTimeout(keyboardTimeoutRef.current);keyboardTimeoutRef.current=undefined;}},[]);var onPageChangeStart=React.useCallback(function(){if(!isEnabled()){return;}clearKeyboardTimeout();var input=TextInput.State.currentlyFocusedInput();input===null||input===void 0?void 0:input.blur();previouslyFocusedTextInputRef.current=input;startTimestampRef.current=Date.now();},[clearKeyboardTimeout,isEnabled]);var onPageChangeConfirm=React.useCallback(function(force){if(!isEnabled()){return;}clearKeyboardTimeout();if(force){Keyboard.dismiss();}else{var input=previouslyFocusedTextInputRef.current;input===null||input===void 0?void 0:input.blur();}previouslyFocusedTextInputRef.current=undefined;},[clearKeyboardTimeout,isEnabled]);var onPageChangeCancel=React.useCallback(function(){if(!isEnabled()){return;}clearKeyboardTimeout();var input=previouslyFocusedTextInputRef.current;if(input){if(Date.now()-startTimestampRef.current<100){keyboardTimeoutRef.current=setTimeout(function(){input===null||input===void 0?void 0:input.focus();previouslyFocusedTextInputRef.current=undefined;},100);}else{input===null||input===void 0?void 0:input.focus();previouslyFocusedTextInputRef.current=undefined;}}},[clearKeyboardTimeout,isEnabled]);React.useEffect(function(){return function(){return clearKeyboardTimeout();};},[clearKeyboardTimeout]);return{onPageChangeStart:onPageChangeStart,onPageChangeConfirm:onPageChangeConfirm,onPageChangeCancel:onPageChangeCancel};}","map":{"version":3,"sources":["useKeyboardManager.tsx"],"names":["previouslyFocusedTextInputRef","React","startTimestampRef","keyboardTimeoutRef","clearKeyboardTimeout","clearTimeout","onPageChangeStart","isEnabled","input","TextInput","Date","onPageChangeConfirm","force","Keyboard","onPageChangeCancel","setTimeout"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { HostComponent, Keyboard, TextInput } from 'react-native';\n\ntype InputRef = React.ElementRef<HostComponent<unknown>> | undefined;\n\nexport default function useKeyboardManager(isEnabled: () => boolean) {\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  const previouslyFocusedTextInputRef = React.useRef<InputRef>(undefined);\n  const startTimestampRef = React.useRef<number>(0);\n  const keyboardTimeoutRef = React.useRef<any>();\n\n  const clearKeyboardTimeout = React.useCallback(() => {\n    if (keyboardTimeoutRef.current !== undefined) {\n      clearTimeout(keyboardTimeoutRef.current);\n      keyboardTimeoutRef.current = undefined;\n    }\n  }, []);\n\n  const onPageChangeStart = React.useCallback(() => {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n\n    const input: InputRef = TextInput.State.currentlyFocusedInput();\n\n    // When a page change begins, blur the currently focused input\n    input?.blur();\n\n    // Store the id of this input so we can refocus it if change was cancelled\n    previouslyFocusedTextInputRef.current = input;\n\n    // Store timestamp for touch start\n    startTimestampRef.current = Date.now();\n  }, [clearKeyboardTimeout, isEnabled]);\n\n  const onPageChangeConfirm = React.useCallback(\n    (force: boolean) => {\n      if (!isEnabled()) {\n        return;\n      }\n\n      clearKeyboardTimeout();\n\n      if (force) {\n        // Always dismiss input, even if we don't have a ref to it\n        // We might not have the ref if onPageChangeStart was never called\n        // This can happen if page change was not from a gesture\n        Keyboard.dismiss();\n      } else {\n        const input = previouslyFocusedTextInputRef.current;\n\n        // Dismiss the keyboard only if an input was a focused before\n        // This makes sure we don't dismiss input on going back and focusing an input\n        input?.blur();\n      }\n\n      // Cleanup the ID on successful page change\n      previouslyFocusedTextInputRef.current = undefined;\n    },\n    [clearKeyboardTimeout, isEnabled]\n  );\n\n  const onPageChangeCancel = React.useCallback(() => {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n\n    // The page didn't change, we should restore the focus of text input\n    const input = previouslyFocusedTextInputRef.current;\n\n    if (input) {\n      // If the interaction was super short we should make sure keyboard won't hide again.\n\n      // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n      // During first ~100ms keyboard will be dismissed no matter what,\n      // so we have to make sure it won't interrupt input refocus logic.\n      // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n      // Subtracting timestamps makes us sure the delay is executed only when needed.\n      if (Date.now() - startTimestampRef.current < 100) {\n        keyboardTimeoutRef.current = setTimeout(() => {\n          input?.focus();\n          previouslyFocusedTextInputRef.current = undefined;\n        }, 100);\n      } else {\n        input?.focus();\n        previouslyFocusedTextInputRef.current = undefined;\n      }\n    }\n  }, [clearKeyboardTimeout, isEnabled]);\n\n  React.useEffect(() => {\n    return () => clearKeyboardTimeout();\n  }, [clearKeyboardTimeout]);\n\n  return {\n    onPageChangeStart,\n    onPageChangeConfirm,\n    onPageChangeCancel,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}