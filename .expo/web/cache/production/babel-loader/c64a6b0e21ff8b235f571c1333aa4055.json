{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";var _excluded=[\"styleInterpolator\",\"interpolationIndex\",\"current\",\"gesture\",\"next\",\"layout\",\"insets\",\"overlay\",\"overlayEnabled\",\"shadowEnabled\",\"gestureEnabled\",\"gestureDirection\",\"pageOverflowEnabled\",\"headerDarkContent\",\"children\",\"containerStyle\",\"contentStyle\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty2(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import Color from'color';import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import InteractionManager from\"react-native-web/dist/exports/InteractionManager\";import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{forModalPresentationIOS}from\"../../TransitionConfigs/CardStyleInterpolators\";import CardAnimationContext from\"../../utils/CardAnimationContext\";import getDistanceForDirection from\"../../utils/getDistanceForDirection\";import getInvertedMultiplier from\"../../utils/getInvertedMultiplier\";import memoize from\"../../utils/memoize\";import{GestureState,PanGestureHandler}from\"../GestureHandler\";import ModalStatusBarManager from\"../ModalStatusBarManager\";import CardSheet from\"./CardSheet\";var GESTURE_VELOCITY_IMPACT=0.3;var TRUE=1;var FALSE=0;var GESTURE_RESPONSE_DISTANCE_HORIZONTAL=50;var GESTURE_RESPONSE_DISTANCE_VERTICAL=135;var useNativeDriver=Platform.OS!=='web';var hasOpacityStyle=function hasOpacityStyle(style){if(style){var flattenedStyle=StyleSheet.flatten(style);return flattenedStyle.opacity!=null;}return false;};var Card=function(_React$Component){_inherits(Card,_React$Component);var _super=_createSuper(Card);function Card(){var _this;_classCallCheck(this,Card);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty(_assertThisInitialized(_this),\"isCurrentlyMounted\",false);_defineProperty(_assertThisInitialized(_this),\"isClosing\",new Animated.Value(FALSE));_defineProperty(_assertThisInitialized(_this),\"inverted\",new Animated.Value(getInvertedMultiplier(_this.props.gestureDirection)));_defineProperty(_assertThisInitialized(_this),\"layout\",{width:new Animated.Value(_this.props.layout.width),height:new Animated.Value(_this.props.layout.height)});_defineProperty(_assertThisInitialized(_this),\"isSwiping\",new Animated.Value(FALSE));_defineProperty(_assertThisInitialized(_this),\"interactionHandle\",void 0);_defineProperty(_assertThisInitialized(_this),\"pendingGestureCallback\",void 0);_defineProperty(_assertThisInitialized(_this),\"lastToValue\",void 0);_defineProperty(_assertThisInitialized(_this),\"animate\",function(_ref){var closing=_ref.closing,velocity=_ref.velocity;var _this$props=_this.props,gesture=_this$props.gesture,transitionSpec=_this$props.transitionSpec,onOpen=_this$props.onOpen,onClose=_this$props.onClose,onTransition=_this$props.onTransition;var toValue=_this.getAnimateToValue(_objectSpread(_objectSpread({},_this.props),{},{closing:closing}));_this.lastToValue=toValue;_this.isClosing.setValue(closing?TRUE:FALSE);var spec=closing?transitionSpec.close:transitionSpec.open;var animation=spec.animation==='spring'?Animated.spring:Animated.timing;_this.setPointerEventsEnabled(!closing);_this.handleStartInteraction();clearTimeout(_this.pendingGestureCallback);onTransition===null||onTransition===void 0?void 0:onTransition({closing:closing,gesture:velocity!==undefined});animation(gesture,_objectSpread(_objectSpread({},spec.config),{},{velocity:velocity,toValue:toValue,useNativeDriver:useNativeDriver,isInteraction:false})).start(function(_ref2){var finished=_ref2.finished;_this.handleEndInteraction();clearTimeout(_this.pendingGestureCallback);if(finished){if(closing){onClose();}else{onOpen();}if(_this.isCurrentlyMounted){_this.forceUpdate();}}});});_defineProperty(_assertThisInitialized(_this),\"getAnimateToValue\",function(_ref3){var closing=_ref3.closing,layout=_ref3.layout,gestureDirection=_ref3.gestureDirection;if(!closing){return 0;}return getDistanceForDirection(layout,gestureDirection);});_defineProperty(_assertThisInitialized(_this),\"setPointerEventsEnabled\",function(enabled){var _this$contentRef$curr;var pointerEvents=enabled?'box-none':'none';(_this$contentRef$curr=_this.contentRef.current)===null||_this$contentRef$curr===void 0?void 0:_this$contentRef$curr.setNativeProps({pointerEvents:pointerEvents});});_defineProperty(_assertThisInitialized(_this),\"handleStartInteraction\",function(){if(_this.interactionHandle===undefined){_this.interactionHandle=InteractionManager.createInteractionHandle();}});_defineProperty(_assertThisInitialized(_this),\"handleEndInteraction\",function(){if(_this.interactionHandle!==undefined){InteractionManager.clearInteractionHandle(_this.interactionHandle);_this.interactionHandle=undefined;}});_defineProperty(_assertThisInitialized(_this),\"handleGestureStateChange\",function(_ref4){var nativeEvent=_ref4.nativeEvent;var _this$props2=_this.props,layout=_this$props2.layout,onClose=_this$props2.onClose,onGestureBegin=_this$props2.onGestureBegin,onGestureCanceled=_this$props2.onGestureCanceled,onGestureEnd=_this$props2.onGestureEnd,gestureDirection=_this$props2.gestureDirection,gestureVelocityImpact=_this$props2.gestureVelocityImpact;switch(nativeEvent.state){case GestureState.BEGAN:_this.isSwiping.setValue(TRUE);_this.handleStartInteraction();onGestureBegin===null||onGestureBegin===void 0?void 0:onGestureBegin();break;case GestureState.CANCELLED:{_this.isSwiping.setValue(FALSE);_this.handleEndInteraction();var velocity=gestureDirection==='vertical'||gestureDirection==='vertical-inverted'?nativeEvent.velocityY:nativeEvent.velocityX;_this.animate({closing:_this.props.closing,velocity:velocity});onGestureCanceled===null||onGestureCanceled===void 0?void 0:onGestureCanceled();break;}case GestureState.END:{_this.isSwiping.setValue(FALSE);var distance;var translation;var _velocity;if(gestureDirection==='vertical'||gestureDirection==='vertical-inverted'){distance=layout.height;translation=nativeEvent.translationY;_velocity=nativeEvent.velocityY;}else{distance=layout.width;translation=nativeEvent.translationX;_velocity=nativeEvent.velocityX;}var closing=(translation+_velocity*gestureVelocityImpact)*getInvertedMultiplier(gestureDirection)>distance/2?_velocity!==0||translation!==0:_this.props.closing;_this.animate({closing:closing,velocity:_velocity});if(closing){_this.pendingGestureCallback=setTimeout(function(){onClose();_this.forceUpdate();},32);}onGestureEnd===null||onGestureEnd===void 0?void 0:onGestureEnd();break;}}});_defineProperty(_assertThisInitialized(_this),\"getInterpolatedStyle\",memoize(function(styleInterpolator,animation){return styleInterpolator(animation);}));_defineProperty(_assertThisInitialized(_this),\"getCardAnimation\",memoize(function(interpolationIndex,current,next,layout,insetTop,insetRight,insetBottom,insetLeft){return{index:interpolationIndex,current:{progress:current},next:next&&{progress:next},closing:_this.isClosing,swiping:_this.isSwiping,inverted:_this.inverted,layouts:{screen:layout},insets:{top:insetTop,right:insetRight,bottom:insetBottom,left:insetLeft}};}));_defineProperty(_assertThisInitialized(_this),\"contentRef\",React.createRef());return _this;}_createClass(Card,[{key:\"componentDidMount\",value:function componentDidMount(){this.animate({closing:this.props.closing});this.isCurrentlyMounted=true;}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){var _this$props3=this.props,layout=_this$props3.layout,gestureDirection=_this$props3.gestureDirection,closing=_this$props3.closing;var width=layout.width,height=layout.height;if(width!==prevProps.layout.width){this.layout.width.setValue(width);}if(height!==prevProps.layout.height){this.layout.height.setValue(height);}if(gestureDirection!==prevProps.gestureDirection){this.inverted.setValue(getInvertedMultiplier(gestureDirection));}var toValue=this.getAnimateToValue(this.props);if(this.getAnimateToValue(prevProps)!==toValue||this.lastToValue!==toValue){this.animate({closing:closing});}}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.isCurrentlyMounted=false;this.handleEndInteraction();}},{key:\"gestureActivationCriteria\",value:function gestureActivationCriteria(){var _this$props4=this.props,layout=_this$props4.layout,gestureDirection=_this$props4.gestureDirection,gestureResponseDistance=_this$props4.gestureResponseDistance;var enableTrackpadTwoFingerGesture=true;var distance=gestureResponseDistance!==undefined?gestureResponseDistance:gestureDirection==='vertical'||gestureDirection==='vertical-inverted'?GESTURE_RESPONSE_DISTANCE_VERTICAL:GESTURE_RESPONSE_DISTANCE_HORIZONTAL;if(gestureDirection==='vertical'){return{maxDeltaX:15,minOffsetY:5,hitSlop:{bottom:-layout.height+distance},enableTrackpadTwoFingerGesture:enableTrackpadTwoFingerGesture};}else if(gestureDirection==='vertical-inverted'){return{maxDeltaX:15,minOffsetY:-5,hitSlop:{top:-layout.height+distance},enableTrackpadTwoFingerGesture:enableTrackpadTwoFingerGesture};}else{var hitSlop=-layout.width+distance;var invertedMultiplier=getInvertedMultiplier(gestureDirection);if(invertedMultiplier===1){return{minOffsetX:5,maxDeltaY:20,hitSlop:{right:hitSlop},enableTrackpadTwoFingerGesture:enableTrackpadTwoFingerGesture};}else{return{minOffsetX:-5,maxDeltaY:20,hitSlop:{left:hitSlop},enableTrackpadTwoFingerGesture:enableTrackpadTwoFingerGesture};}}}},{key:\"render\",value:function render(){var _this$props5=this.props,styleInterpolator=_this$props5.styleInterpolator,interpolationIndex=_this$props5.interpolationIndex,current=_this$props5.current,gesture=_this$props5.gesture,next=_this$props5.next,layout=_this$props5.layout,insets=_this$props5.insets,overlay=_this$props5.overlay,overlayEnabled=_this$props5.overlayEnabled,shadowEnabled=_this$props5.shadowEnabled,gestureEnabled=_this$props5.gestureEnabled,gestureDirection=_this$props5.gestureDirection,pageOverflowEnabled=_this$props5.pageOverflowEnabled,headerDarkContent=_this$props5.headerDarkContent,children=_this$props5.children,customContainerStyle=_this$props5.containerStyle,contentStyle=_this$props5.contentStyle,rest=_objectWithoutProperties(_this$props5,_excluded);var interpolationProps=this.getCardAnimation(interpolationIndex,current,next,layout,insets.top,insets.right,insets.bottom,insets.left);var interpolatedStyle=this.getInterpolatedStyle(styleInterpolator,interpolationProps);var containerStyle=interpolatedStyle.containerStyle,cardStyle=interpolatedStyle.cardStyle,overlayStyle=interpolatedStyle.overlayStyle,shadowStyle=interpolatedStyle.shadowStyle;var handleGestureEvent=gestureEnabled?Animated.event([{nativeEvent:gestureDirection==='vertical'||gestureDirection==='vertical-inverted'?{translationY:gesture}:{translationX:gesture}}],{useNativeDriver:useNativeDriver}):undefined;var _StyleSheet$flatten=StyleSheet.flatten(contentStyle||{}),backgroundColor=_StyleSheet$flatten.backgroundColor;var isTransparent=typeof backgroundColor==='string'?Color(backgroundColor).alpha()===0:false;return React.createElement(CardAnimationContext.Provider,{value:interpolationProps},Platform.OS==='ios'&&overlayEnabled&&next&&getIsModalPresentation(styleInterpolator)?React.createElement(ModalStatusBarManager,{dark:headerDarkContent,layout:layout,insets:insets,style:cardStyle}):null,React.createElement(Animated.View,{style:{opacity:current},collapsable:false}),React.createElement(View,_extends({pointerEvents:\"box-none\"},rest),overlayEnabled?React.createElement(View,{pointerEvents:\"box-none\",style:StyleSheet.absoluteFill},overlay({style:overlayStyle})):null,React.createElement(Animated.View,{style:[styles.container,containerStyle,customContainerStyle],pointerEvents:\"box-none\"},React.createElement(PanGestureHandler,_extends({enabled:layout.width!==0&&gestureEnabled,onGestureEvent:handleGestureEvent,onHandlerStateChange:this.handleGestureStateChange},this.gestureActivationCriteria()),React.createElement(Animated.View,{needsOffscreenAlphaCompositing:hasOpacityStyle(cardStyle),style:[styles.container,cardStyle]},shadowEnabled&&shadowStyle&&!isTransparent?React.createElement(Animated.View,{style:[styles.shadow,gestureDirection==='horizontal'?[styles.shadowHorizontal,styles.shadowLeft]:gestureDirection==='horizontal-inverted'?[styles.shadowHorizontal,styles.shadowRight]:gestureDirection==='vertical'?[styles.shadowVertical,styles.shadowTop]:[styles.shadowVertical,styles.shadowBottom],{backgroundColor:backgroundColor},shadowStyle],pointerEvents:\"none\"}):null,React.createElement(CardSheet,{ref:this.contentRef,enabled:pageOverflowEnabled,layout:layout,style:contentStyle},children))))));}}]);return Card;}(React.Component);export{Card as default};_defineProperty(Card,\"defaultProps\",{shadowEnabled:false,gestureEnabled:true,gestureVelocityImpact:GESTURE_VELOCITY_IMPACT,overlay:function overlay(_ref5){var style=_ref5.style;return style?React.createElement(Animated.View,{pointerEvents:\"none\",style:[styles.overlay,style]}):null;}});export var getIsModalPresentation=function getIsModalPresentation(cardStyleInterpolator){return cardStyleInterpolator===forModalPresentationIOS||cardStyleInterpolator.name==='forModalPresentationIOS';};var styles=StyleSheet.create({container:{flex:1},overlay:{flex:1,backgroundColor:'#000'},shadow:{position:'absolute',shadowRadius:5,shadowColor:'#000',shadowOpacity:0.3},shadowHorizontal:{top:0,bottom:0,width:3,shadowOffset:{width:-1,height:1}},shadowLeft:{left:0},shadowRight:{right:0},shadowVertical:{left:0,right:0,height:3,shadowOffset:{width:1,height:-1}},shadowTop:{top:0},shadowBottom:{bottom:0}});","map":{"version":3,"sources":["Card.tsx"],"names":["GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","hasOpacityStyle","style","flattenedStyle","StyleSheet","Card","React","shadowEnabled","gestureEnabled","gestureVelocityImpact","overlay","styles","componentDidMount","closing","componentDidUpdate","height","width","prevProps","gestureDirection","getInvertedMultiplier","toValue","componentWillUnmount","Animated","velocity","onTransition","spec","transitionSpec","animation","clearTimeout","gesture","undefined","isInteraction","finished","onClose","onOpen","getDistanceForDirection","enabled","pointerEvents","InteractionManager","nativeEvent","GestureState","onGestureBegin","onGestureCanceled","distance","layout","translation","setTimeout","onGestureEnd","memoize","styleInterpolator","index","current","progress","next","swiping","inverted","layouts","screen","insets","top","right","bottom","left","insetLeft","gestureActivationCriteria","gestureResponseDistance","enableTrackpadTwoFingerGesture","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","containerStyle","rest","interpolationProps","interpolatedStyle","shadowStyle","handleGestureEvent","translationY","translationX","backgroundColor","contentStyle","isTransparent","Color","getIsModalPresentation","cardStyle","opacity","overlayEnabled","absoluteFill","overlayStyle","handleGestureStateChange","cardStyleInterpolator","container","flex","shadow","position","shadowRadius","shadowColor","shadowOpacity","shadowHorizontal","shadowOffset","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom"],"mappings":"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","sourcesContent":["import Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  InteractionManager,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewProps,\n  ViewStyle,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport { forModalPresentationIOS } from '../../TransitionConfigs/CardStyleInterpolators';\nimport type {\n  GestureDirection,\n  Layout,\n  StackCardInterpolationProps,\n  StackCardStyleInterpolator,\n  TransitionSpec,\n} from '../../types';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport {\n  GestureState,\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport ModalStatusBarManager from '../ModalStatusBarManager';\nimport CardSheet from './CardSheet';\n\ntype Props = ViewProps & {\n  interpolationIndex: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  headerDarkContent: boolean | undefined;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin: () => void;\n  onGestureCanceled: () => void;\n  onGestureEnd: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: number;\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    shadowEnabled: false,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const { gesture, transitionSpec, onOpen, onClose, onTransition } =\n      this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    this.isClosing.setValue(closing ? TRUE : FALSE);\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      animation: StackCardInterpolationProps\n    ) => styleInterpolator(animation)\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimation = memoize(\n    (\n      interpolationIndex: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index: interpolationIndex,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n    const enableTrackpadTwoFingerGesture = true;\n\n    const distance =\n      gestureResponseDistance !== undefined\n        ? gestureResponseDistance\n        : gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ? GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      }\n    }\n  }\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      interpolationIndex,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      headerDarkContent,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolationProps = this.getCardAnimation(\n      interpolationIndex,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      interpolationProps\n    );\n\n    const { containerStyle, cardStyle, overlayStyle, shadowStyle } =\n      interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={interpolationProps}>\n        {\n          // StatusBar messes with translucent status bar on Android\n          // So we should only enable it on iOS\n          Platform.OS === 'ios' &&\n          overlayEnabled &&\n          next &&\n          getIsModalPresentation(styleInterpolator) ? (\n            <ModalStatusBarManager\n              dark={headerDarkContent}\n              layout={layout}\n              insets={insets}\n              style={cardStyle}\n            />\n          ) : null\n        }\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View\n                needsOffscreenAlphaCompositing={hasOpacityStyle(cardStyle)}\n                style={[styles.container, cardStyle]}\n              >\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.contentRef}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nexport const getIsModalPresentation = (\n  cardStyleInterpolator: StackCardStyleInterpolator\n) => {\n  return (\n    cardStyleInterpolator === forModalPresentationIOS ||\n    // Handle custom modal presentation interpolators as well\n    cardStyleInterpolator.name === 'forModalPresentationIOS'\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}