{"ast":null,"code":"import{NavigationContainerRefContext,NavigationHelpersContext}from'@react-navigation/core';import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import useLinkTo from\"./useLinkTo\";export default function useLinkProps(_ref){var to=_ref.to,action=_ref.action;var root=React.useContext(NavigationContainerRefContext);var navigation=React.useContext(NavigationHelpersContext);var linkTo=useLinkTo();var onPress=function onPress(e){var _e$currentTarget;var shouldHandle=false;if(Platform.OS!=='web'||!e){shouldHandle=e?!e.defaultPrevented:true;}else if(!e.defaultPrevented&&!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&(e.button==null||e.button===0)&&[undefined,null,'','self'].includes((_e$currentTarget=e.currentTarget)===null||_e$currentTarget===void 0?void 0:_e$currentTarget.target)){e.preventDefault();shouldHandle=true;}if(shouldHandle){if(action){if(navigation){navigation.dispatch(action);}else if(root){root.dispatch(action);}else{throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");}}else{linkTo(to);}}};return{href:to,accessibilityRole:'link',onPress:onPress};}","map":{"version":3,"sources":["useLinkProps.tsx"],"names":["action","root","React","navigation","linkTo","useLinkTo","onPress","e","shouldHandle","Platform","href","accessibilityRole"],"mappings":"AAAA,OAAA,6BAAA,CAAA,wBAAA,KAAA,wBAAA,CAKA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,6DAGA,MAAA,CAAA,SAAA,mBAaA,cAAe,SAAA,CAAA,YAAA,MAEqB,IAAlC,CAAA,EAAkC,MAAlC,EAAkC,CAA5BA,MAA4B,MAA5BA,MAA4B,CAClC,GAAMC,CAAAA,IAAI,CAAGC,KAAK,CAALA,UAAAA,CAAb,6BAAaA,CAAb,CACA,GAAMC,CAAAA,UAAU,CAAGD,KAAK,CAALA,UAAAA,CAAnB,wBAAmBA,CAAnB,CACA,GAAME,CAAAA,MAAM,CAAGC,SAAf,EAAA,CAEA,GAAMC,CAAAA,OAAO,CACXC,QADID,CAAAA,OACJC,CAAAA,CADc,CAEX,CAAA,GAAA,CAAA,gBAAA,CACH,GAAIC,CAAAA,YAAY,CAAhB,KAAA,CAEA,GAAIC,QAAQ,CAARA,EAAAA,GAAAA,KAAAA,EAAyB,CAA7B,CAAA,CAAiC,CAC/BD,YAAY,CAAGD,CAAC,CAAG,CAACA,CAAC,CAAL,gBAAA,CAAhBC,IAAAA,CADF,CAAA,IAEO,IACL,CAACD,CAAC,CAAF,gBAAA,EAEA,EAAEA,CAAC,CAADA,OAAAA,EAAaA,CAAC,CAAdA,MAAAA,EAAyBA,CAAC,CAA1BA,OAAAA,EAAsCA,CAAC,CAFzC,QAEA,CAFA,GAICA,CAAC,CAADA,MAAAA,EAAAA,IAAAA,EAAoBA,CAAC,CAADA,MAAAA,GAJrB,CAAA,GAMA,CAAA,SAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,EAAA,QAAA,CAAA,CAAA,gBAAA,CAAuCA,CAAC,CAAxC,aAAA,IAAA,IAAA,EAAA,gBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAuCA,gBAAAA,CAPlC,MAOL,CAPK,CAQL,CACAA,CAAC,CAADA,cAAAA,GACAC,YAAY,CAAZA,IAAAA,CACD,CAED,GAAA,YAAA,CAAkB,CAChB,GAAA,MAAA,CAAY,CACV,GAAA,UAAA,CAAgB,CACdL,UAAU,CAAVA,QAAAA,CAAAA,MAAAA,EADF,CAAA,IAEO,IAAA,IAAA,CAAU,CACfF,IAAI,CAAJA,QAAAA,CAAAA,MAAAA,EADK,CAAA,IAEA,CACL,KAAM,IAAA,CAAA,KAAA,CAAN,kFAAM,CAAN,CAGD,CATH,CAAA,IAUO,CACLG,MAAM,CAANA,EAAM,CAANA,CACD,CACF,CAlCH,CAAA,CAqCA,MAAO,CACLM,IAAI,CADC,EAAA,CAELC,iBAAiB,CAFZ,MAAA,CAGLL,OAAAA,CAAAA,OAHK,CAAP,CAKD","sourcesContent":["import {\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n} from '@react-navigation/core';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  return {\n    href: to,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}