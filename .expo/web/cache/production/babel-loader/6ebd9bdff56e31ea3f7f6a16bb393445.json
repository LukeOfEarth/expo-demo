{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"initialRouteName\",\"children\",\"screenListeners\",\"screenOptions\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import{createNavigatorFactory,StackActions,StackRouter,useNavigationBuilder}from'@react-navigation/native';import*as React from'react';import warnOnce from'warn-once';import StackView from\"../views/Stack/StackView\";function StackNavigator(_ref){var initialRouteName=_ref.initialRouteName,children=_ref.children,screenListeners=_ref.screenListeners,screenOptions=_ref.screenOptions,rest=_objectWithoutProperties(_ref,_excluded);var mode=rest.mode;warnOnce(mode!=null,\"Stack Navigator: 'mode=\\\"\"+mode+\"\\\"' is deprecated. Use 'presentation: \\\"\"+mode+\"\\\"' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator#presentation for more details.\");var headerMode=rest.headerMode;warnOnce(headerMode==='none',\"Stack Navigator: 'headerMode=\\\"none\\\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headershown for more details.\");warnOnce(headerMode!=null&&headerMode!=='none',\"Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headermode for more details.\");var keyboardHandlingEnabled=rest.keyboardHandlingEnabled;warnOnce(keyboardHandlingEnabled!==undefined,\"Stack Navigator: 'keyboardHandlingEnabled' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#keyboardhandlingenabled for more details.\");var defaultScreenOptions={presentation:mode,headerShown:headerMode?headerMode!=='none':true,headerMode:headerMode&&headerMode!=='none'?headerMode:undefined,keyboardHandlingEnabled:keyboardHandlingEnabled};var _useNavigationBuilder=useNavigationBuilder(StackRouter,{initialRouteName:initialRouteName,children:children,screenListeners:screenListeners,screenOptions:screenOptions,defaultScreenOptions:defaultScreenOptions}),state=_useNavigationBuilder.state,descriptors=_useNavigationBuilder.descriptors,navigation=_useNavigationBuilder.navigation,NavigationContent=_useNavigationBuilder.NavigationContent;React.useEffect(function(){var _navigation$addListen;return(_navigation$addListen=navigation.addListener)===null||_navigation$addListen===void 0?void 0:_navigation$addListen.call(navigation,'tabPress',function(e){var isFocused=navigation.isFocused();requestAnimationFrame(function(){if(state.index>0&&isFocused&&!e.defaultPrevented){navigation.dispatch(_objectSpread(_objectSpread({},StackActions.popToTop()),{},{target:state.key}));}});});},[navigation,state.index,state.key]);return React.createElement(NavigationContent,null,React.createElement(StackView,_extends({},rest,{state:state,descriptors:descriptors,navigation:navigation})));}export default createNavigatorFactory(StackNavigator);","map":{"version":3,"sources":["createStackNavigator.tsx"],"names":["rest","mode","warnOnce","headerMode","keyboardHandlingEnabled","defaultScreenOptions","presentation","headerShown","NavigationContent","useNavigationBuilder","initialRouteName","children","screenListeners","screenOptions","React","navigation","e","isFocused","requestAnimationFrame","state","StackActions","target","key","createNavigatorFactory"],"mappings":"6xCAAA,OAAA,sBAAA,CAAA,YAAA,CAAA,WAAA,CAAA,oBAAA,KAAA,0BAAA,CAYA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CACA,MAAA,CAAA,QAAA,KAAA,WAAA,CAQA,MAAA,CAAA,SAAA,gCAWA,QAAA,CAAA,cAAA,MAMU,IANc,CAAA,gBAMd,MANc,gBAMd,CANc,QAMd,MANc,QAMd,CANc,eAMd,MANc,eAMd,CANc,aAMd,MANc,aAMd,CADLA,IACK,0CAER,GAAMC,CAAAA,IAAI,CAAGD,IAAI,CAAjB,IAAA,CAEAE,QAAQ,CACND,IAAI,EADE,IAAA,6BAEqBA,IAFrB,4CAJA,IAIA,0HAARC,CAMA,GAAMC,CAAAA,UAAU,CAAGH,IAAI,CAAvB,UAAA,CAEAE,QAAQ,CACNC,UAAU,GADZD,MAAQ,qMAARA,CAKAA,QAAQ,CACNC,UAAU,EAAVA,IAAAA,EAAsBA,UAAU,GAlB1B,MAiBA,oMAARD,CAMA,GAAME,CAAAA,uBAAuB,CAAGJ,IAAI,CAApC,uBAAA,CAEAE,QAAQ,CACNE,uBAAuB,GADzBF,SAAQ,8NAARA,CAKA,GAAMG,CAAAA,oBAA4C,CAAG,CACnDC,YAAY,CADuC,IAAA,CAEnDC,WAAW,CAAEJ,UAAU,CAAGA,UAAU,GAAb,MAAA,CAF4B,IAAA,CAGnDA,UAAU,CAAEA,UAAU,EAAIA,UAAU,GAAxBA,MAAAA,CAAAA,UAAAA,CAHuC,SAAA,CAInDC,uBAAAA,CAAAA,uBAJmD,CAArD,CAOA,0BACEK,oBAAoB,CAAA,WAAA,CAML,CACbC,gBADa,CACbA,gBADa,CAEbC,QAFa,CAEbA,QAFa,CAGbC,eAHa,CAGbA,eAHa,CAIbC,aAJa,CAIbA,aAJa,CAKbR,oBAAAA,CAAAA,oBALa,CANK,CADtB,CAAM,KAAN,uBAAM,KAAN,CAAM,WAAN,uBAAM,WAAN,CAAM,UAAN,uBAAM,UAAN,CAAwCG,iBAAxC,uBAAwCA,iBAAxC,CAeAM,KAAK,CAALA,SAAAA,CACE,UAAA,CAAA,GAAA,CAAA,qBAAA,CAAA,MAAA,CAAA,qBAAA,CACEC,UAAU,CADZ,WAAA,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CACEA,qBAAAA,CAAAA,IAAAA,CAAAA,UAAAA,CAAU,UAAVA,CAAsCC,SAAAA,CAAD,CAAO,CAC1C,GAAMC,CAAAA,SAAS,CAAGF,UAAU,CADc,SACxBA,EAAlB,CAIAG,qBAAqB,CAAC,UAAM,CAC1B,GACEC,KAAK,CAALA,KAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EAEA,CAAEH,CAAD,CAHH,gBAAA,CAIE,CAGAD,UAAU,CAAVA,QAAAA,gCACKK,YAAY,CADG,QACfA,EADLL,MAEEM,MAAM,CAAEF,KAAK,CAACG,GAFhBP,IAID,CAZHG,CAAqB,CAArBA,CANJ,CACEH,CADF,CADFD,CAAAA,CAsBE,CAAA,UAAA,CAAaK,KAAK,CAAlB,KAAA,CAA0BA,KAAK,CAtBjCL,GAsBE,CAtBFA,EAyBA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,IAAA,CACE,KAAA,CAAA,aAAA,CAAA,SAAA,CAAA,QAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAEE,KAAK,CAFP,KAAA,CAGE,WAAW,CAHb,WAAA,CAIE,UAAU,CAAEC,UAJd,CAAA,CAAA,CADF,CADF,CAUD,CAED,cAAeQ,CAAAA,sBAAsB,CAArC,cAAqC,CAArC","sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  StackHeaderMode,\n  StackNavigationConfig,\n  StackNavigationEventMap,\n  StackNavigationOptions,\n} from '../types';\nimport StackView from '../views/Stack/StackView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap\n> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: Props) {\n  // @ts-expect-error: mode is deprecated\n  const mode = rest.mode as 'card' | 'modal' | undefined;\n\n  warnOnce(\n    mode != null,\n    `Stack Navigator: 'mode=\"${mode}\"' is deprecated. Use 'presentation: \"${mode}\"' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator#presentation for more details.`\n  );\n\n  // @ts-expect-error: headerMode='none' is deprecated\n  const headerMode = rest.headerMode as StackHeaderMode | 'none' | undefined;\n\n  warnOnce(\n    headerMode === 'none',\n    `Stack Navigator: 'headerMode=\"none\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headershown for more details.`\n  );\n\n  warnOnce(\n    headerMode != null && headerMode !== 'none',\n    `Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headermode for more details.`\n  );\n\n  // @ts-expect-error: headerMode='none' is deprecated\n  const keyboardHandlingEnabled = rest.keyboardHandlingEnabled;\n\n  warnOnce(\n    keyboardHandlingEnabled !== undefined,\n    `Stack Navigator: 'keyboardHandlingEnabled' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#keyboardhandlingenabled for more details.`\n  );\n\n  const defaultScreenOptions: StackNavigationOptions = {\n    presentation: mode,\n    headerShown: headerMode ? headerMode !== 'none' : true,\n    headerMode: headerMode && headerMode !== 'none' ? headerMode : undefined,\n    keyboardHandlingEnabled,\n  };\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      StackNavigationOptions,\n      StackNavigationEventMap\n    >(StackRouter, {\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <StackView\n        {...rest}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"module"}